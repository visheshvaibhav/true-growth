
Title: Official Razorpay Integration Standard for Laravel (2025)

Overview:
This document outlines the standard and officially recommended method for integrating Razorpay into a Laravel application. It follows Razorpay’s official PHP SDK guidelines and includes both backend and frontend steps necessary for secure, production-ready payment integration.

---------------------------------------------
1. INSTALL RAZORPAY PHP SDK
---------------------------------------------
Use Composer to install the official Razorpay SDK:
    composer require razorpay/razorpay

This allows the backend to create orders, handle API calls, and verify payments.

---------------------------------------------
2. CONFIGURE ENVIRONMENT VARIABLES
---------------------------------------------
Add your Razorpay keys to the `.env` file:
    RAZORPAY_KEY=your_key_id
    RAZORPAY_SECRET=your_key_secret

Access these via `env()` in Laravel controllers:
    $key = env('RAZORPAY_KEY');
    $secret = env('RAZORPAY_SECRET');

---------------------------------------------
3. FRONTEND PAYMENT FLOW (checkout.js)
---------------------------------------------
On your checkout Blade view, include:
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

Trigger Razorpay Checkout with:
```javascript
var options = {
    "key": "{{ env('RAZORPAY_KEY') }}",
    "amount": "{{ $amount * 100 }}", // in paisa
    "currency": "INR",
    "name": "The True Growth",
    "description": "Order Payment",
    "image": "/logo.png",
    "order_id": "{{ $order->razorpay_order_id }}",
    "handler": function (response) {
        // send razorpay_payment_id, razorpay_order_id, razorpay_signature to backend
    },
    "prefill": {
        "name": "{{ $user->name }}",
        "email": "{{ $user->email }}"
    },
    "theme": {
        "color": "#3399cc"
    }
};
var rzp = new Razorpay(options);
rzp.open();


⸻

	4.	BACKEND – CREATE RAZORPAY ORDER

⸻

In your Laravel controller:

use Razorpay\Api\Api;

public function createOrder(Request $request)
{
    $api = new Api(env('RAZORPAY_KEY'), env('RAZORPAY_SECRET'));

    $order = $api->order->create([
        'receipt' => 'ORDER_' . uniqid(),
        'amount' => $request->amount * 100,
        'currency' => 'INR'
    ]);

    return response()->json([
        'order_id' => $order['id']
    ]);
}

Save the Razorpay order_id in your database and use it in the frontend checkout.

⸻

	5.	BACKEND – VERIFY PAYMENT

⸻

After the payment, verify the signature on server:

public function verifyPayment(Request $request)
{
    $signature = $request->razorpay_signature;
    $paymentId = $request->razorpay_payment_id;
    $orderId = $request->razorpay_order_id;

    $generated_signature = hash_hmac('sha256', $orderId . "|" . $paymentId, env('RAZORPAY_SECRET'));

    if ($generated_signature === $signature) {
        // Payment is verified and successful
        // Update your order status here
    } else {
        // Signature mismatch — treat as failed payment
    }
}


⸻

	6.	ROUTES (web.php or api.php)

⸻


Route::post('/razorpay/order', [PaymentController::class, 'createOrder']);
Route::post('/razorpay/verify', [PaymentController::class, 'verifyPayment']);


⸻

	7.	ERROR HANDLING – DO NOT USE ALERT POPUPS

⸻

	•	Avoid using blocking browser alert() for Razorpay errors.
	•	Use modal, toast, or inline UI messages.
	•	Make sure the popup can be closed or disappears automatically.
	•	Always handle failed payments gracefully.

⸻

	8.	DO NOT SKIP VERIFICATION

⸻

Payment success in Razorpay is not guaranteed until the backend verification of the signature is completed. Never rely only on frontend status.

⸻

	9.	RESOURCES

⸻

	•	Razorpay Official Docs: https://razorpay.com/docs/
	•	PHP SDK: https://github.com/razorpay/razorpay-php
	•	Laravel Integration Guide (Community): https://razorpay.com/docs/payments/server-integration/php/

---
